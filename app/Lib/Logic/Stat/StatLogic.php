<?phpnamespace App\Lib\Logic\Stat;use App\Lib\Clog;use App\Lib\Telegram\TelegramTrait;use App\Models\Account\AccountChangeReport;use App\Models\Admin\SysStat;use App\Models\Report\ReportStatStack;/** * 用户每日数据　 * 2019-11 整理 * Class ReportUserStatDay * @package App\Models\Report */class StatLogic{    static $queueName = "stat_user";    use TelegramTrait;    /** @var array ================================= 数据变更 ================================== */    // 个人    public static $filters = array(        'have_bet',        'first_register',        'recharge_amount',        'recharge_count',        'first_recharge_count',        'repeat_recharge_count',        'withdraw_amount',        'withdraw_count',        'bets',        'cancel',        'he_return',        'commission_from_bet',        'commission_from_child',        'bonus',        'score',        'transfer_to_child',        'transfer_from_parent',        'salary',        'dividend',        'gift',        'system_transfer_add',        'system_transfer_reduce',    );    // 团队    public static $team_filters = array(        'have_bet',        'first_register',        'first_recharge_count',        'repeat_recharge_count',        'recharge_amount',        'recharge_count',        'withdraw_amount',        'withdraw_count',        'bets',        'cancel',        'he_return',        'commission_from_bet',        'commission_from_child',        'bonus',        'score',        'salary',        'gift',        'system_transfer_add',        'system_transfer_reduce',    );    // 团队    public static $onlyOneField = array(    );    /**     * @param $partnerSign     * @param $playerId     * @param $rid     * @param $changes     * @param $date     * @return bool|string     */    static function change($partnerSign, $playerId, $rid, $changes, $date)    {        $changes = array_intersect_key($changes, array_flip(self::$filters));        if(empty($changes)) {            return true;        }        $_team  = array_flip(self::$team_filters);        $selfDayUpdate = '';        $teamDayUpdate = '';        $selfDayAdd = '';        $teamDayAdd = '';        foreach($changes as $field => $v) {            if (!$v) {                continue;            }            if(in_array($field, self::$onlyOneField)) {                if ($v > 0) {                    $selfDayUpdate .= $selfDayAdd . " `{$field}` = 1";                } else {                    $selfDayUpdate .= $selfDayAdd . " `{$field}` = 0";                }            } else {                $selfDayUpdate .= $selfDayAdd . " `{$field}` = `{$field}` + {$v}";            }            $selfDayAdd = ',';            // 是 否包含团队            if(isset($_team[$field])) {                if (!in_array($field, self::$onlyOneField)) {                    $teamDayUpdate .= $teamDayAdd . "`team_{$field}` = `team_{$field}` + {$v}";                    $teamDayAdd = ',';                }            }        }        $statDay   = date("Ymd", strtotime($date));        // 更新团队量        $filter = array_filter(explode('|', $rid));        array_pop($filter);        if(count($filter) > 0) {            $ids = implode("','", $filter);            // 日 团队 更新            if ($ids && $teamDayUpdate) {                $sql = "update `report_stat_user_day` set {$teamDayUpdate} where  `partner_sign` = '{$partnerSign}' and `user_id` in ('{$ids}') and `day`='{$statDay}'";                $ret = db()->update($sql);                if(!$ret) {                    return "update-stat-user-team-day-fail-" . $sql;                }            }        }        // 更新自身量 天        if($selfDayUpdate) {            $sql = "update `report_stat_user_day` set {$selfDayUpdate} where `partner_sign` = '{$partnerSign}' and `user_id` ='{$playerId}'  and `day` = '{$statDay}'";            $ret = db()->update($sql);            if(!$ret) {                return "update-stat-user-day-fail-" . $sql;            }        }        return true;    }    static $statTypes = [        'bet_cost',        'cancel_order',        'trace_cost',        'cancel_trace_order',        'he_return',        'commission_from_bet',        'commission_from_child',        'game_bonus',        'gift',        'score',        'day_salary',        "dividend_from_parent",        "bonus_limit_reduce",        "bonus_challenge_reduce",    ];    /**     * @return array|string     * @throws \Exception     */    static function doPlayerStat() {        $key = "stat_player_stack_process";        if (!cache()->add($key, time(), now()->addMinutes(30))) {            $time = cache()->get($key);            $date = date("Y-m-d H:i:s", $time);            return "对不起, 当前正在统计中, 开始于{$date}-结束在30分钟后";        }        // 开始        try {            $startTime = time();            // 未有统计时间　则为上一条为统计的            $lastAccountChangeItem = AccountChangeReport::whereIn("type_sign", self::$statTypes)->where('stat_time', 0)->orderBy('id', "ASC")->first();            $startM     = 0;            $endM       = 0;            // 遍历            $totalProject       = 0;            $totalCommission    = 0;            $failCount          = 0;            $totalReportCount   = 0;            $failAccountChangeCount = 0;            if ($lastAccountChangeItem) {                $startM = $lastAccountChangeItem->day_m ;                $endTime = strtotime($startM) + 1200;                if ($endTime > time()) {                    $endTime = time();                }                $endM  = date("YmdHi", $endTime);                // 1.统计帐变                $query = AccountChangeReport::select(                    'account_change_report.id',                    'account_change_report.user_id',                    'account_change_report.partner_sign',                    'account_change_report.rid',                    'account_change_report.project_id',                    'account_change_report.type_sign',                    'account_change_report.lottery_sign',                    'account_change_report.method_sign',                    'account_change_report.day_m',                    'account_change_report.amount',                    'lottery_projects.day_m as project_day_m'                )->leftJoin('lottery_projects', 'lottery_projects.id', '=', 'account_change_report.project_id')                    ->where("account_change_report.day_m", ">=", $startM)->where("account_change_report.day_m", "<", $endM)                    ->whereIn("account_change_report.type_sign", self::$statTypes)                    ->where("account_change_report.stat_time", 0)                    ->orderBy('account_change_report.id', "ASC");                $pageSize = 2500;                $i = 0;                $totalReportCount = $query->count();                $totalPage = ceil($totalReportCount / $pageSize);                Clog::statUser("stat-account-process-{$startM}-{$endM}-total:{$totalReportCount}-page:{$totalPage}-" . time(), []);                $userArr = [];                do {                    $offset = $failAccountChangeCount;                    $items = $query->skip($offset)->take($pageSize)->get();                    $data = [];                    foreach ($items as $item) {                        if ($item->project_id > 0) {                            $day = date("Ymd", strtotime($item->project_day_m . "00"));                        } else {                            $day = date("Ymd", strtotime($item->day_m . "00"));                        }                        $userArr[$item->user_id] = [                            'partner_sign' => $item->partner_sign,                            'rid' => $item->rid,                        ];                        // 初始化 日子                        if (!isset($data[$day])) {                            $data[$day] = [];                        }                        // 初始化 用户                        if (!isset($data[$day][$item->user_id])) {                            $data[$day][$item->user_id] = [                                'id_arr' => [],                                'bets' => 0,                                'cancel' => 0,                                'he_return' => 0,                                'commission_from_bet' => 0,                                'commission_from_child' => 0,                                'bonus' => 0,                                'score' => 0,                                'salary' => 0,                                'dividend' => 0,                                'gift' => 0,                                'system_transfer_add' => 0,                                'system_transfer_reduce' => 0,                            ];                        }                        // 记录对应ID                        $data[$day][$item->user_id]['id_arr'][] = $item->id;                        switch ($item->type_sign) {                            case "bet_cost":                            case "trace_cost":                                $data[$day][$item->user_id]['bets'] += $item->amount;                                $totalProject++;                                break;                            case "commission_from_bet":                                $data[$day][$item->user_id]['commission_from_bet'] += $item->amount;                                $totalCommission++;                                break;                            case "commission_from_child":                                $data[$day][$item->user_id]['commission_from_child'] += $item->amount;                                $totalCommission++;                                break;                            case "game_bonus":                                $data[$day][$item->user_id]['bonus'] += $item->amount;                                break;                            case "cancel_order":                            case "cancel_trace_order":                                $data[$day][$item->user_id]['cancel'] += $item->amount;                                break;                            case "he_return":                                $data[$day][$item->user_id]['he_return'] += $item->amount;                                break;                            case "gift":                                $data[$day][$item->user_id]['gift'] += $item->amount;                                break;                            case "day_salary":                                $data[$day][$item->user_id]['salary'] += $item->amount;                                break;                            case "dividend_from_parent":                                $data[$day][$item->user_id]['dividend'] += $item->amount;                                break;                            case "bonus_challenge_reduce":                            case "bonus_limit_reduce":                                $data[$day][$item->user_id]['bonus'] -= $item->amount;                                break;                        }                    }                    // 数据                    foreach ($data as $day => $playerArr) {                        foreach ($playerArr as $playerId => $_data) {                            $idArr = $_data['id_arr'];                            unset($_data['id_arr']);                            db()->beginTransaction();                            try {                                $res = self::change($userArr[$playerId]['partner_sign'], $playerId, $userArr[$playerId]['rid'], $_data, $day);                                if ($res !== true) {                                    $failCount++;                                    $failAccountChangeCount += count($idArr);                                    // 记录数据                                    Clog::statUser("stat-user-type-t-day-{$day}-player:{$playerId}-错误-" . $res, $_data);                                    continue;                                } else {                                    // 更新                                    AccountChangeReport::whereIn("id", $idArr)->update(['stat_time' => time()]);                                }                                db()->commit();                            } catch (\Exception $e) {                                db()->rollback();                                $failAccountChangeCount += count($idArr);                                Clog::statUser("stat-user-exception-type-t-day-{$day}-player:{$playerId}-错误-" . $e->getMessage(), $_data);                            }                        }                    }                    $i++;                } while ($i < $totalPage);            }            /** ==================================================================== stack ============================================================ */            $lastItem = ReportStatStack::where('stat_time', 0)->orderBy('id', "ASC")->first();            $playerCount        = 0;            $rechargeCount      = 0;            $withdrawCount      = 0;            $stackTotalCount    = 0;            $stackStartTime     = 0;            $stackEndM          = 0;            $failStackCount     = 0;            if ($lastItem) {                $stackStartTime = $lastItem->day_m;                $endTime = strtotime($stackStartTime) + 1200;                if ($endTime > time()) {                    $endTime = time();                }                $stackEndM  = date("YmdHi", $endTime);                // 统计当前分钟之前                $query = ReportStatStack::where("day_m", ">=", $stackStartTime)->where("day_m", "<", $stackEndM)->where('stat_time', 0)->orderBy('id', "ASC");                $stackTotalCount = $query->count();                Clog::statUser("stat-stack-process-{$stackStartTime}-{$stackEndM}-total:{$stackTotalCount}-" . time(), []);                if ($stackTotalCount > 0) {                    $pageSize   = 1500;                    $i          = 0;                    $totalPage  = ceil($stackTotalCount / $pageSize);                    do {                        $offset = $failCount;                        $items  = $query->skip($offset)->take($pageSize)->get();                        foreach ($items as $item) {                            $day = date("Ymd", strtotime($item->created_at));                            db()->beginTransaction();                            try {                                $processDone = true;                                switch ($item->type_sign) {                                    case 'system_transfer_add':                                    case 'system_transfer_reduce':                                    case 'transfer_from_parent':                                    case 'transfer_to_child':                                        $_data = [$item->type_sign => $item->amount];                                        $res = self::change($item->partner_sign, $item->user_id, $item->rid, $_data, $day);                                        if ($res !== true) {                                            $failCount++;                                            $failStackCount++;                                            // 记录数据                                            Clog::statStack("stat-user-stack-{$item->type_sign}-day-{$day}-player:{$item->user_id}-错误-" . $res, $_data);                                            db()->rollback();                                            $processDone = false;                                            break;                                        }                                        $playerCount ++;                                        break;                                    case 'register':                                        $_data = ['first_register' => 1];                                        $res = self::change($item->partner_sign, $item->user_id, $item->rid, $_data, $day);                                        if ($res !== true) {                                            $failCount++;                                            $failStackCount++;                                            // 记录数据                                            Clog::statStack("stat-user-stack-register-day-{$day}-player:{$item->user_id}-错误-" . $res, $_data);                                            db()->rollback();                                            $processDone = false;                                            break;                                        }                                        $playerCount ++;                                        break;                                    case 'first_bet':                                        $_data = ['have_bet' => 1];                                        $res = self::change($item->partner_sign, $item->user_id, $item->rid, $_data, $day);                                        if ($res !== true) {                                            $failCount++;                                            $failStackCount++;                                            // 记录数据                                            Clog::statStack("stat-user-stack-first_bet-day-{$day}-player:{$item->user_id}-错误-" . $res, $_data);                                            db()->rollback();                                            $processDone = false;                                            break;                                        }                                        break;                                    case 'cancel':                                        $_data = ['have_bet' => -1];                                        $res = self::change($item->partner_sign, $item->user_id, $item->rid, $_data, $day);                                        if ($res !== true) {                                            $failCount++;                                            $failStackCount++;                                            // 记录数据                                            Clog::statStack("stat-user-type-player-day-{$day}-player:{$item->user_id}-错误-" . $res, $_data);                                            db()->rollback();                                            $processDone = false;                                            break;                                        }                                        break;                                    case 'recharge':                                        $_data = ['recharge_amount' => $item->amount, 'recharge_count' => 1];                                        if ($item->is_first) {                                            $_data["first_recharge_count"] = 1;                                        }                                        if ($item->is_before_has) {                                            $_data["repeat_recharge_count"] = 1;                                        }                                        $res = self::change($item->partner_sign, $item->user_id, $item->rid, $_data, $day);                                        if ($res !== true) {                                            $failCount++;                                            $failStackCount++;                                            // 记录数据                                            Clog::statStack("stat-user-stack-recharge-day-{$day}-player:{$item->user_id}-错误-" . $res, $_data);                                            db()->rollback();                                            $processDone = false;                                            break;                                        }                                        $rechargeCount ++;                                        break;                                    case 'withdraw':                                        $_data = ['withdraw_amount' => $item->amount, 'withdraw_count' => 1];                                        $res = self::change($item->partner_sign, $item->user_id, $item->rid, $_data, $day);                                        if ($res !== true) {                                            $failCount++;                                            $failStackCount++;                                            // 记录数据                                            Clog::statStack("stat-user-stack-withdraw-day-{$day}-player:{$item->user_id}-错误-" . $res, $_data);                                            db()->rollback();                                            $processDone = false;                                            break;                                        }                                        $withdrawCount ++;                                        break;                                }                                if ($processDone) {                                    $item->stat_time = time();                                    $item->save();                                }                                db()->commit();                            } catch (\Exception $e) {                                db()->rollback();                                Clog::statStack("stat-user-stack-exception-day-{$day}-player:{$item->user_id}-错误-" . $e->getMessage());                            }                        }                        $i++;                    } while ($i < $totalPage);                }            }            $stat = [                'report_start_m'            => $startM,                'report_end_m'              => $endM,                'stack_start_m'             => $stackStartTime,                'stack_end_m'               => $stackEndM,                'total_report_count'        => $totalReportCount,                'total_stack_count'         => $stackTotalCount,                'total_report_fail_count'   => $failAccountChangeCount,                'total_stack_fail_count'    => $failStackCount,                'project_count'             => $totalProject,                'commission_count'          => $totalCommission,                'player_count'              => $playerCount,                'recharge_count'            => $rechargeCount,                'withdraw_count'            => $withdrawCount,                'status'            => $failCount > 0 ? 1 : 2,                'start_time'        => $startTime,                'end_time'          => time()            ];            SysStat::insert($stat);            cache()->forget($key);        } catch (\Exception $e) {            cache()->forget($key);            $msg = "统计异常：" . $e->getMessage() . "-" .  $e->getFile() . "-" .  $e->getLine();            telegramSend("send_exception", $msg);            return [                'status'  => "exception",                'msg'     => $e->getMessage(),                'file'    => $e->getFile(),                'line'    => $e->getLine(),            ];        }        return $stat;    }}